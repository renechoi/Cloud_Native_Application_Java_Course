SELECT COUNT(*)
FROM EMPLOYEES;

SELECT COUNT(EMPLOYEES.COMMISSION_PCT)
FROM EMPLOYEES;

SELECT COUNT(*)
FROM EMPLOYEES
WHERE SALARY > 16000;

SELECT COUNT(*), SUM(SALARY)
FROM EMPLOYEES
WHERE SALARY > 16000;



SELECT COUNT(*), SUM(SALARY), AVG(NVL(SALARY, 0))
FROM EMPLOYEES;


SELECT COUNT(*), MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES



SELECT DEPARTMENT_ID, SALARY
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID ASC;

SELECT DEPARTMENT_ID, AVG(SALARY)
FROM EMPLOYEES
ORDER BY DEPARTMENT_ID ASC;



SELECT DEPARTMENT_ID, AVG(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY DEPARTMENT_ID ASC



SELECT DEPARTMENT_ID, COUNT(*), SUM(SALARY) AS SAL
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID

SELECT DEPARTMENT_ID, COUNT(*), SUM(SALARY) AS SUMMATION
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING SUM(SALARY) > 20000;



SELECT DEPARTMENT_ID, SUM(SALARY) AS SAL
FROM EMPLOYEES
WHERE SAL
GROUP BY DEPARTMENT_ID


SELECT EMPLOYEE_ID,
       SALARY,
       CASE
           WHEN JOB_ID = 'ac_account' THEN SALARY + SALARY * 0.1
           WHEN JOB_ID = 'ac_mgr' THEN SALARY + SALARY * 0.2
           ELSE SALARY
           END JOB_IDSSSSS
FROM HR.EMPLOYEES


SELECT FIRST_NAME,
       DEPARTMENT_ID,
       CASE
           WHEN DEPARTMENT_ID >= 10 AND DEPARTMENT_ID < 50 THEN 'A-Team'
           WHEN DEPARTMENT_ID BETWEEN 60 AND 100 THEN 'B-team'
           WHEN DEPARTMENT_ID >= 110 AND DEPARTMENT_ID <= 150 THEN 'C-team'
           ELSE '팀없음'
           END "팀"
FROM EMPLOYEES



SELECT COUNT(*)
FROM EMPLOYEES,
     DEPARTMENTS



SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME, DEPARTMENTS.DEPARTMENT_ID
FROM EMPLOYEES,
     DEPARTMENTS
WHERE EMPLOYEES.EMPLOYEE_ID = DEPARTMENTS.DEPARTMENT_ID;

SELECT EMPLOYEES.FIRST_NAME, EMPLOYEES.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME, DEPARTMENTS.DEPARTMENT_ID
FROM EMPLOYEES,
     DEPARTMENTS
WHERE DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.EMPLOYEE_ID;


SELECT FIRST_NAME, JOBS.JOB_ID, JOBS.JOB_TITLE
FROM EMPLOYEES,
     JOBS
WHERE EMPLOYEES.JOB_ID = JOBS.JOB_ID;


SELECT FIRST_NAME, DEPARTMENT_NAME, JOB_TITLE
FROM EMPLOYEES,
     JOBS,
     DEPARTMENTS
WHERE EMPLOYEES.JOB_ID = JOBS.JOB_ID
  AND EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID;



SELECT EMP.FIRST_NAME, MGR.FIRST_NAME
FROM EMPLOYEES EMP,
     EMPLOYEES MGR
WHERE EMP.EMPLOYEE_ID = MGR.MANAGER_ID;



SELECT D.DEPARTMENT_ID, FIRST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES E
         RIGHT OUTER JOIN DEPARTMENTS D
                          ON E.DEPARTMENT_ID = D.DEPARTMENT_ID


SELECT E.DEPARTMENT_ID, E.FIRST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES E
         FULL OUTER JOIN DEPARTMENTS D
                         ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;



-- 문제 1.
-- 직원중에 최고임금(salary)과  최저임금을 “최고임금, “최저임금”프로젝션 타이틀로 함께 출력해 보세요. 두 임금의 차이는 얼마인가요?
-- “최고임금 – 최저임금”이란 타이틀로 함께 출력해 보세요.


SELECT MAX(SALARY) - MIN(SALARY) "최고임금- 최저임금"
FROM EMPLOYEES;



-- 문제2.
-- 마지막으로 신입사원이 들어온 날은 언제 입니까? 다음 형식으로 출력해주세요.
-- 예) 2014년 07월 10일

SELECT TO_CHAR(MAX(HIRE_DATE), 'yyyy"년" mm"월" dd"일"') "DATE"
FROM EMPLOYEES;

-- 문제 3
-- 부서별로 평균임금, 최고임금, 최저임금을 부서(department_id)와 함께 출력하고 정렬순서는
-- 부서번호(department_id) 내림차순입니다.

SELECT DEPARTMENT_ID, ROUND(AVG(SALARY), 0), MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY 1 DESC

--
-- 문제4.
-- 업무(job_id)별로 평균임금, 최고임금, 최저임금을 업무(job_id)와 함께 출력하고 정렬순서는 업무(job_id) 내림차순입니다.


SELECT JOB_ID, ROUND(AVG(SALARY), 0), MAX(SALARY), MIN(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID
ORDER BY 1;



-- 문제5.
-- 가장 오래 근속한 직원의 입사일은 언제인가요? 다음 형식으로 출력해주세요.
-- 예) 2014년 07월 10일

-- 이렇게 하면 안된다 !
SELECT TO_CHAR(MIN(E_DATE.HIRE_DATE), 'yyyy"년" mm"월" dd"일"') 날짜
FROM EMPLOYEES E_NAME,
     EMPLOYEES E_DATE
WHERE E_NAME.FIRST_NAME = E_DATE.HIRE_DATE;


--
-- 문제6.
-- 평균임금과 최저임금의 차이가 2000 미만인 부서(department_id), 평균임금, 최저임금 그리고 (평균임금 – 최저임금)를 (평균임금 – 최저임금)의 내림차순으로 정렬해서 출력하세요.


SELECT ROUND(AVG(SALARY), 0), MIN(SALARY), ROUND(AVG(SALARY) - MIN(SALARY), 0)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) - MIN(SALARY) < 2000
ORDER BY 3 DESC;



-- 문제 1
-- 각 사원(employee)에 대해서 사번(employee_id), 이름(first_name), 부서명(department_name), 매니저(manager)의 이름(first_name)을 조회하세요.


SELECT E_NAME.FIRST_NAME "EMPLOYEE", M_INFO.FIRST_NAME "MANAGER", D.DEPARTMENT_NAME
FROM EMPLOYEES E_NAME,
     EMPLOYEES M_INFO,
     DEPARTMENTS D
WHERE E_NAME.EMPLOYEE_ID = M_INFO.MANAGER_ID
  AND D.DEPARTMENT_ID = E_NAME.DEPARTMENT_ID;


/**
지역(regions)에 속한 나라들을 지역이름(region_name), 나라이름(country_name)으로 출력하되 지역이름, 나라이름 순서대로 내림차순으로 정렬하세요.
 */
SELECT REGIONS.REGION_NAME, COUNTRIES.COUNTRY_NAME, COUNTRIES.REGION_ID
FROM COUNTRIES,
     REGIONS
WHERE COUNTRIES.REGION_ID = REGIONS.REGION_ID
ORDER BY REGION_NAME DESC, COUNTRY_NAME DESC;


/*
문제3.
각 부서(department)에 대해서
부서번호(department_id), 부서이름(department_name),
매니저(manager)의 이름(first_name),
위치(locations)한 도시(city), 나라(countries)의 이름(countries_name)
그리고 지역구분(regions)의 이름(region_name)까지 전부 출력해 보세요.
//11개
 */


-- select department.DEPARTMENT_ID,
--        department.DEPARTMENT_NAME,
--        manager.FIRST_NAME,
--        employee.FIRST_NAME,
--        employee.EMPLOYEE_ID,
--        locations.CITY,
--        countries.COUNTRY_NAME
-- from EMPLOYEES employee,
--      EMPLOYEES manager,
--      DEPARTMENTS department,
--      LOCATIONS locations,
--      COUNTRIES countries,
--      REGIONS regious
-- where manager.EMPLOYEE_ID = employee.MANAGER_ID
--   and employee.MANAGER_ID = department.MANAGER_ID
--   and department.DEPARTMENT_ID = employee.DEPARTMENT_ID
--   and department.LOCATION_ID = locations.LOCATION_ID
--   and locations.COUNTRY_ID = countries.COUNTRY_ID
--   and countries.REGION_ID = regious.REGION_ID


SELECT DEPARTMENT.DEPARTMENT_ID,
       DEPARTMENT.DEPARTMENT_NAME,
       MANAGER.FIRST_NAME,
       LOCATIONS.CITY,
       COUNTIRES.COUNTRY_NAME
FROM DEPARTMENTS DEPARTMENT,
     EMPLOYEES MANAGER,
     LOCATIONS LOCATIONS,
     COUNTRIES COUNTIRES,
     REGIONS REGIONS
WHERE DEPARTMENT.MANAGER_ID = MANAGER.EMPLOYEE_ID
  AND DEPARTMENT.LOCATION_ID = LOCATIONS.LOCATION_ID
  AND LOCATIONS.COUNTRY_ID = COUNTIRES.COUNTRY_ID
  AND COUNTIRES.REGION_ID = REGIONS.REGION_ID;


/**
문제4.
‘Public Accountant’의 직책(job_title)으로 과거에 근무한 적이 있는
  모든 사원의 사번과 이름을 출력하세요.
  (현재 ‘Public Accountant’의 직책(job_title)으로 근무하는 사원은 고려하지 않습니다.)
  이름은 first_name과 last_name을 합쳐 출력합니다.
//2명
 */

SELECT CONCAT(CONCAT(EMPLOYEES.FIRST_NAME, ' '), EMPLOYEES.LAST_NAME) NAME
FROM EMPLOYEES EMPLOYEES,
     JOB_HISTORY JOB_HISTORY,
     JOBS JOBS
WHERE JOBS.JOB_TITLE = 'Public Accountant'
  AND JOBS.JOB_ID = JOB_HISTORY.JOB_ID
  AND EMPLOYEES.EMPLOYEE_ID = JOB_HISTORY.EMPLOYEE_ID



/**
  문제5.
직원들의 사번(employee_id), 이름(first_name), 성(last_name)과 부서 이름(department_name)을 조회하여
  성(last_name)순서로 오름차순 정렬하세요
//106 명
  (+  부서가 없는 사람도 조회 되도록.. 107명)
 */


/*
 문제6.
자신의 매니저보다 채용일(hire_date)이 빠른 사원의
사번(employee_id), 성(last_name)과 채용일(hire_date)을 조회하세요
// 37 명
 */

SELECT *
FROM EMPLOYEES employees,
     EMPLOYEES managers
WHERE employees.MANAGER_ID = managers.EMPLOYEE_ID
  AND employees.HIRE_DATE < managers.HIRE_DATE;



SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY > (SELECT SALARY
                FROM EMPLOYEES
                WHERE EMPLOYEES.FIRST_NAME = 'Den');


SELECT FIRST_NAME, SALARY, EMPLOYEE_ID
FROM EMPLOYEES
WHERE SALARY = (SELECT MIN(SALARY) FROM EMPLOYEES);



SELECT *
FROM EMPLOYEES
WHERE SALARY IN (SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 110);


SELECT DEPARTMENT_ID, EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE (DEPARTMENT_ID, SALARY) IN (SELECT DEPARTMENT_ID, MAX(SALARY) FROM EMPLOYEES GROUP BY DEPARTMENT_ID)



SELECT employees.DEPARTMENT_ID, employees.EMPLOYEE_ID, employees.FIRST_NAME, employees.SALARY
FROM EMPLOYEES employees,
     (SELECT DEPARTMENT_ID, MAX(SALARY) salary FROM employees GROUP BY DEPARTMENT_ID) department_max_sal
WHERE employees.DEPARTMENT_ID = department_max_sal.DEPARTMENT_ID
  AND employees.SALARY = department_max_sal.salary;



SELECT rownum,
       FIRST_NAME,
       SALARY
FROM EMPLOYEES
ORDER BY SALARY DESC;


SELECT ROWNUM,
       FIRST_NAME,
       SALARY
FROM (SELECT FIRST_NAME, SALARY
      FROM EMPLOYEES
      ORDER BY SALARY DESC)
WHERE ROWNUM <= 3;



SELECT row_num,
       FIRST_NAME,
       SALARY
FROM (SELECT ROWNUM row_num, FIRST_NAME, SALARY
      FROM (SELECT FIRST_NAME, SALARY
            FROM EMPLOYEES
            ORDER BY SALARY DESC))
WHERE row_num >= 11
  AND row_num <= 20;


SELECT row_num,
       FIRST_NAME,
       SALARY,
       HIRE_DATE
FROM (SELECT ROWNUM row_num,
             FIRST_NAME,
             SALARY,
             HIRE_DATE
      FROM (SELECT FIRST_NAME,
                   SALARY,
                   HIRE_DATE
            FROM EMPLOYEES employees
            WHERE TO_CHAR(HIRE_DATE, 'yyyy') = '2007'
            ORDER BY SALARY DESC))
WHERE row_num >= 3
  AND row_num <= 7;


-- 급여 평균 이하의 사람들

SELECT *
FROM employees
WHERE salary < (SELECT AVG(employee.SALARY)
                FROM EMPLOYEES employee);



-- 각 업무 별로 연봉의 총합 구하기
--     총합이 가장 높은 업무부터 업무명과 연봉 총합 조회하기


SELECT employees.JOB_ID, EMPLOYEES.salary
FROM EMPLOYEES employees
GROUP BY employees.JOB_ID;

SELECT jobs.JOB_TITLE, job_salary.salary_sum
FROM JOBS jobs,
     (SELECT employees.JOB_ID, SUM(EMPLOYEES.salary) salary_sum
      FROM EMPLOYEES employees
      GROUP BY employees.JOB_ID) job_salary
WHERE jobs.JOB_ID = job_salary.JOB_ID
ORDER BY  2 desc;


